<snippet>
	<content><![CDATA[
// Internal api - 1 indexing
// Exposed api - 0 indexing
template <typename T>
class fenwick {
private:
	int n;
	vector<T> tr;

public:
	fenwick(int _n) {
		n = _n;
		tr.resize(n + 1, T(0));
	}

	template <typename V>
	void build(vector<V> &a) {
		n = max(n, sz(a));
		tr.resize(n + 1);
		for(int i = 0; i < sz(a); ++i)
			add(i, static_cast<T>(a[i]));
	}

	template <typename V>
	void build(V a[], int m) {
		n = max(n, m);
		tr.resize(n + 1);
		for(int i = 0; i < m; ++i)
			add(i, static_cast<T>(a[i]));
	}

	void add(int k, ll x) {
		++k;
		while (k <= n) {
			tr[k] += x;
			k += k&-k;
		}
	}

	T sum(int k) {
		++k;
		ll s = 0;
		while (k >= 1) {
			s += tr[k];
			k -= k&-k;
		}
		return s;
	}

	T query(int l, int r) {
		return sum(r) - (l - 1 > 0 ? sum(l - 1) : 0);
	}
};
${1}${0}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fenwick</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
