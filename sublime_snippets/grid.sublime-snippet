<snippet>
	<content><![CDATA[
// 2D Grid
template <typename T>
class grid {
private:
	int n, m;
	vector<vector<T>> mat;

	static constexpr int dx[4] = {1, -1, 0, 0};
	static constexpr int dy[4] = {0, 0, 1, -1};

public:
	grid(int _n, int _m) {
		n = _n, m = _m;
		mat.resize(n);
		for(auto &v : mat) {
			v.resize(m, T());
		}
	}

	vector<T>& operator[](int idx) {
		return mat[idx];
	}

	bool inline is_valid(int i, int j) {
		return (i >= 0 && j >= 0 && i < n && j < m);
	}
	bool inline is_valid(pair<int, int> ix) {
		return is_valid(ix.first, ix.second);
	}

	vector<pair<int, int>> inline next(int i, int j) {
		vector<pair<int, int>> neighbours;
		for(int k = 0; k < 4; ++k) {
			int ix = i + dx[k], jx = j + dy[k];
			if(is_valid(ix, jx)) 
				neighbours.push_back({ix, jx});
		}
		return neighbours;
	}
	vector<pair<int, int>> inline next(pair<int, int> ix) {
		return next(ix.first, ix.second);
	}

	/* Gives the next node from (i, j) according to the direction.
	 * Valid directions are u and U for moving up. Rest three
     * directions are similar.
	*/
	pair<int, int> inline move(int i, int j, char dir) {
		pair<int, int> res;
		if(dir == 'U' || dir == 'u') {
			res = {i - 1, j};

		} else if(dir == 'D' || dir == 'd') {
			res = {i + 1, j};

		} else if(dir == 'L' || dir == 'l') {
			res = {i, j - 1};

		} else if(dir == 'R' || dir == 'r') {
			res = {i, j + 1};

		} else {
			cerr << "Error: invalid direction" << nl;
			res = {-1, -1};
		}
		return res;
	}
	pair<int, int> inline move(pair<int, int> ix, char dir) {
		return move(ix.first, ix.second, dir);
	}

	/* Gives the next node from (i, j) according to the direction.
	 * Valid directions are up, UP, uP, Up, u, and U for moving up. 
	 * Rest three directions are similar.
	*/
	pair<int, int> inline move(int i, int j, string dir) {
		for(auto &ch : dir)
			ch = tolower(ch);

		pair<int, int> res;
		if(dir == "up" || dir == "u") {
			res = {i - 1, j};

		} else if(dir == "down" || dir == "d") {
			res = {i + 1, j};

		} else if(dir == "left" || dir == "l") {
			res = {i, j - 1};

		} else if(dir == "right" || dir == "r") {
			res = {i, j + 1};

		} else {
			cerr << "Error: invalid direction" << nl;
			res = {-1, -1};
		}
		return res;
	}
	pair<int, int> inline move(pair<int, int> ix, string dir) {
		return move(ix.first, ix.second, dir);
	}
};
${1}${0}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>grid</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>