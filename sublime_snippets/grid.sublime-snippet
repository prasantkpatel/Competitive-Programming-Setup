<snippet>
	<content><![CDATA[
// 2D Grid
template <typename T>
class Grid {
	private:
		struct node {
			private:
				T val;
				int i, j;
				vector<pair<int, int>> neighbours;

			public:
				node() {
					val = T();
					i = -1, j = -1;
				}

				void set(int _i, int _j) {
					i = _i;
					j = _j;
				}

				vector<pair<int, int>>& next() {
					return neighbours;
				}

				friend ostream& operator<<(ostream &o, node &obj) {
					o << obj.val;
					return o;
				}

				friend istream& operator>>(istream &i, node &obj) {
					i >> obj.val;
					return i;
				}

				/* Gives the next node from (i, j) according to the direction.
				 * Valid directions are u and U for moving up. Rest three
                 * directions are similar.
				*/
				pair<int, int> operator[](char dir) {
					pair<int, int> res;
					if(dir == 'U' || dir == 'u') {
						res = {i - 1, j};

					} else if(dir == 'D' || dir == 'd') {
						res = {i + 1, j};

					} else if(dir == 'L' || dir == 'l') {
						res = {i, j - 1};

					} else if(dir == 'R' || dir == 'r') {
						res = {i, j + 1};

					} else {
						cerr << "Error: invalid direction" << nl;
						res = {-1, -1};
					}
					return res;
				}

				/* Gives the next node from (i, j) according to the direction.
				 * Valid directions are up, UP, uP, Up, u, and U for moving up. 
				 * Rest three directions are similar.
				*/
				pair<int, int> operator[](string dir) {
					for(auto &ch : dir)
						ch = tolower(ch);

					pair<int, int> res;
					if(dir == "up" || dir == "u") {
						res = {i - 1, j};

					} else if(dir == "down" || dir == "d") {
						res = {i + 1, j};

					} else if(dir == "left" || dir == "l") {
						res = {i, j - 1};

					} else if(dir == "right" || dir == "r") {
						res = {i, j + 1};

					} else {
						cerr << "Error: invalid direction" << nl;
						res = {-1, -1};
					}
					return res;
				}
		};

		int n, m;
		vector<vector<node>> mat;

		int dx[4], dy[4];

	public:
		Grid(int _n, int _m) {
			dx[0] = 1, dx[1] = -1, dx[2] = 0, dx[3] = 0;
			dy[0] = 0, dy[1] = 0, dy[2] = 1, dy[3] = -1;

			n = _n, m = _m;
			mat.resize(n);
			for(auto &v : mat) {
				v.resize(m, node());
			}

			for(int i = 0; i < n; ++i) {
				for(int j = 0; j < m; ++j) {
					for(int k = 0; k < 4; ++k) {
						if(is_valid(i + dx[k], j + dy[k])) {
							mat[i][j].next().push_back({i + dx[k], j + dy[k]});
							mat[i][j].set(i, j);
						}
					}
				}
			}
		}

		vector<node>& operator[](int idx) {
			return mat[idx];
		}

		bool is_valid(int i, int j) {
			return (i >= 0 && j >= 0 && i < n && j < m);
		}
};
${1}${0}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>grid</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>